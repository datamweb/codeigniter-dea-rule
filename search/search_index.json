{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#codeigniter-dea-rule","title":"CodeIgniter DEA Rule","text":"<p><code>CodeIgniter DEA Rule</code> helps you to validate the email provided by the user and to deal with it if the email was of Temporary &amp; Disponsable Emails(DEA) use type. <code>CodeIgniter DEA Rule</code> is actually a custom validation rule, but with more features than a rule.</p> <p><code>CodeIgniter DEA Rule</code> allows you to check emails in a comprehensive list of Temporary &amp; Disponsable Emails(DEA), but it is not satisfied with this amount, you can create a custom database of emails that you recognize as disposable.</p> <p>In this project, as much as possible, the Code Quality Control Tools used by the Codeigniter4 Core Team have been used.</p> <p></p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on it's contributors to be a success. The following users have contributed in one manner or another in making <code>CodeIgniter DEA Rule</code>:</p> <p> </p>"},{"location":"how_to_use/","title":"How to Use","text":"<p>In general, after installing <code>codeigniter-dea-rule</code>, a new rule is added to Codegniter's validation rules, named <code>is_temp_email</code>. From now on, you can use it like other CI4 rules.</p> <p><code>is_temp_email</code> rule could now be used just like any other rule:</p> Rule Parameter Description Example <code>is_temp_email</code> No Fails if the field contains a Disposable Temporary E-mail. <code>is_temp_email</code>"},{"location":"how_to_use/#how-to-use-rule","title":"How To Use Rule","text":"<pre><code>// e.g.\n$validation-&gt;setRules([\n    'email' =&gt; 'required|max_length[19]|is_temp_email',\n]);</code></pre> <pre><code>// e.g.\n// In Controller.\n\nif (! $this-&gt;validate([\n    'email' =&gt; 'required|max_length[19]|is_temp_email',\n    'password' =&gt; 'required|min_length[10]',\n])) {\n    // The validation failed.\n    return view('login', [\n        'errors' =&gt; $this-&gt;validator-&gt;getErrors(),\n    ]);\n}\n\n// The validation was successful.</code></pre> <pre><code>// ...\n\n$rules = [\n    'email'    =&gt; 'required|max_length[254]|valid_email|is_temp_email',\n    'password' =&gt; 'required|max_length[255]|min_length[10]',\n    'passconf' =&gt; 'required|max_length[255]|matches[password]',\n];\n\n// ...</code></pre>"},{"location":"how_to_use/#practical-examples-for-codeigniter-shield","title":"Practical Examples For CodeIgniter Shield","text":"<p>As you know, CodeIgniter Shield allows you to easily apply your custom validation rules to fields. In the example below, we have shown how to use <code>is_temp_email</code> rule for the user registration form. Add the $registration property with the all validation rules and <code>is_temp_email</code> for registration in app/Config/Validation.php: <pre><code>//--------------------------------------------------------------------\n// Rules For Registration\n//--------------------------------------------------------------------\npublic $registration = [\n    'username' =&gt; [\n        'label' =&gt; 'Auth.username',\n        'rules' =&gt; [\n            'required',\n            'max_length[30]',\n            'min_length[3]',\n            'regex_match[/\\A[a-zA-Z0-9\\.]+\\z/]',\n            'is_unique[users.username]',\n        ],\n    ],\n    'email' =&gt; [\n        'label' =&gt; 'Auth.email',\n        'rules' =&gt; [\n            'required',\n            'max_length[254]',\n            'valid_email',\n            'is_unique[auth_identities.secret]',\n            'is_temp_email', // just add this line\n        ],\n    ],\n    'password' =&gt; [\n        'label' =&gt; 'Auth.password',\n        'rules' =&gt; 'required|max_byte[72]|strong_password[]',\n        'errors' =&gt; [\n            'max_byte' =&gt; 'Auth.errorPasswordTooLongBytes'\n        ]\n    ],\n    'password_confirm' =&gt; [\n        'label' =&gt; 'Auth.passwordConfirm',\n        'rules' =&gt; 'required|matches[password]',\n    ],\n];</code></pre></p>"},{"location":"install/","title":"Installation","text":"<p>These instructions assume that you have already installed the CodeIgniter 4 app starter as the basis for your new project, set up your <code>.env</code> file, and created a database that you can access via the Spark CLI script.</p>"},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li>Composer If you install through Composer.</li> <li>Codeigniter v4.4.3 or later</li> <li>PHP 7.4.3+</li> </ul>"},{"location":"install/#composer-installation","title":"Composer Installation","text":"<p>Installation is done through Composer. The example assumes you have it installed globally. If you have it installed as a phar, or otherwise you will need to adjust the way you call composer itself.</p> <pre><code>composer require datamweb/codeigniter-dea-rule</code></pre>"},{"location":"install/#manually-installation","title":"Manually Installation","text":"<p>You can manually install <code>codeigniter-dea-rule</code> by extracting the project file to path <code>app\\ThirdParty\\codeigniter-dea-rule</code> and then adding:</p> <p><pre><code>public $psr4 = [\n  // add this line\n  'Datamweb\\\\CodeIgniterDEARule' =&gt; APPPATH . 'ThirdParty/codeigniter-dea-rule/src',\n];</code></pre> to the app\\Config\\Autoload.php file, however we do not recommend this. Please use the Composer.</p>"},{"location":"install/#add-required-table","title":"Add Required Table","text":"<p><code>codeigniter-dea-rule</code> After the efforts of users, it collects information with DEA emails, so that the administrator can have accurate statistical information. These attempts are stored in the <code>logs_temp_email</code> table. Therefore, there is a need to create a new table to store this data. Run the following command to create the desired table.</p> <pre><code>php spark migrate -n Datamweb\\CodeIgniterDEARule</code></pre>"},{"location":"install/#publish-dearule-config-in-app","title":"Publish DEARule Config in app","text":"<p><code>codeigniter-dea-rule</code> uses a configuration file named DEARule.php. Therefore, by setting it, if you update for a new version, file DEARule.php may be overwritten, which causes the settings you have already made to be lost.</p> <p>To solve this problem, run the following command to create a new configuration file in path app/Config/DEARule.php. From now on, you should make all the settings in file app/Config/DEARule.php Not vendor\\datamweb\\codeigniter-dea-rule\\src\\Config\\DEARule.php.</p> <pre><code>php spark dea-rule:publish</code></pre>"}]}